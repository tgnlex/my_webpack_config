"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismaWebpackPlugin = void 0;
const node_path_1 = __importDefault(require("node:path"));
const generator_1 = require("./generator");
const PLUGIN_NAME = 'prisma-webpack-plugin';
class PrismaWebpackPlugin {
    options;
    constructor(options) {
        this.options = options || {};
    }
    apply(compiler) {
        const logger = compiler.getInfrastructureLogger(PLUGIN_NAME);
        const { prisma = node_path_1.default.join(compiler.options.context || process.cwd(), 'prisma/schema.prisma') } = this.options;
        compiler.hooks.run.tapAsync(PLUGIN_NAME, (_compiler, callback) => {
            (0, generator_1.generate)(prisma, logger).then(() => {
                callback();
            }, err => {
                callback(err);
            });
        });
        let watching;
        let unwatch;
        compiler.hooks.watchRun.tapAsync(PLUGIN_NAME, (_compiler, callback) => {
            if (!watching) {
                const ret = (0, generator_1.watch)(prisma, logger);
                watching = ret.watching;
                unwatch = ret.unwatch;
            }
            watching.then(() => {
                callback();
            }, err => {
                callback(err);
            });
        });
        compiler.hooks.watchClose.tap(PLUGIN_NAME, () => {
            unwatch?.();
        });
    }
}
exports.PrismaWebpackPlugin = PrismaWebpackPlugin;
exports.default = PrismaWebpackPlugin;
//# sourceMappingURL=index.js.map