import path from 'node:path';
import { generate, watch } from './generator';
const PLUGIN_NAME = 'prisma-webpack-plugin';
export class PrismaWebpackPlugin {
    options;
    constructor(options) {
        this.options = options || {};
    }
    apply(compiler) {
        const logger = compiler.getInfrastructureLogger(PLUGIN_NAME);
        const { prisma = path.join(compiler.options.context || process.cwd(), 'prisma/schema.prisma') } = this.options;
        compiler.hooks.run.tapAsync(PLUGIN_NAME, (_compiler, callback) => {
            generate(prisma, logger).then(() => {
                callback();
            }, err => {
                callback(err);
            });
        });
        let watching;
        let unwatch;
        compiler.hooks.watchRun.tapAsync(PLUGIN_NAME, (_compiler, callback) => {
            if (!watching) {
                const ret = watch(prisma, logger);
                watching = ret.watching;
                unwatch = ret.unwatch;
            }
            watching.then(() => {
                callback();
            }, err => {
                callback(err);
            });
        });
        compiler.hooks.watchClose.tap(PLUGIN_NAME, () => {
            unwatch?.();
        });
    }
}
export default PrismaWebpackPlugin;
//# sourceMappingURL=index.js.map