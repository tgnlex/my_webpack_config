import fs from 'node:fs';
import path from 'node:path';
import { enginesVersion } from '@prisma/engines';
import { getGenerators } from '@prisma/internals';
import chokidar from 'chokidar';
export async function shouldRegenerate(output, lastModifiedAt = Date.now()) {
    if (!output) {
        return true;
    }
    let lastGenerateAt = 0;
    try {
        const state = await fs.promises.stat(path.resolve(output, 'index.js'));
        lastGenerateAt = state.mtimeMs;
    }
    catch {
        lastGenerateAt = 0;
    }
    return lastGenerateAt < lastModifiedAt;
}
export async function generate(entry, logger, lastModifiedAt = Date.now()) {
    try {
        logger.info('begin to generate');
        const generators = await getGenerators({
            schemaPath: entry,
            printDownloadProgress: true,
            version: enginesVersion,
            // cliVersion: '5.5.2',
            generatorNames: undefined,
            postinstall: false,
            noEngine: false
        });
        if (!generators.length) {
            throw new Error('no generators');
        }
        let count = 0;
        for (const generator of generators) {
            const output = generator.config.output?.value;
            if (await shouldRegenerate(output, lastModifiedAt)) {
                try {
                    count++;
                    await generator.generate();
                    generator.stop();
                }
                catch (err) {
                    generator.stop();
                }
            }
        }
        if (count > 0) {
            logger.info('generated');
        }
        else {
            logger.info('no need to generate');
        }
    }
    catch (err) {
        logger.error(err);
        throw err;
    }
}
export function watch(entry, logger, cb) {
    let watcher;
    const watching = new Promise((resolve, reject) => {
        let timer;
        let lastModifiedAt = 0;
        watcher = chokidar.watch(entry);
        watcher.on('ready', () => {
            const watched = watcher.getWatched();
            for (const files of Object.values(watched)) {
                if (files.length) {
                    return;
                }
            }
            resolve(0);
            cb?.();
        });
        watcher.on('all', (ev, p, stats) => {
            lastModifiedAt = Math.max(lastModifiedAt, stats?.mtimeMs || Date.now());
            timer && clearTimeout(timer);
            timer = setTimeout(() => {
                timer = undefined;
                generate(entry, logger, lastModifiedAt).then(() => {
                    resolve(0);
                    cb?.();
                }, err => {
                    reject(err);
                    cb?.(err);
                });
            }, 300);
        });
    });
    return {
        watching,
        unwatch: () => watcher.close()
    };
}
//# sourceMappingURL=generator.js.map